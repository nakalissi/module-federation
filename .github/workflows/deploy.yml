name: CI/CD Frontend Multi-Env

on:
  push:
    branches:
      - dev
      - stage
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        env: [dev, stage, prod]
      fail-fast: false

    if: github.ref == 'refs/heads/' + matrix.env || (matrix.env == 'prod' && github.ref == 'refs/heads/main')

    env:
      AWS_REGION: us-east-1
      ROLE_ARN: arn:aws:iam::123456789012:role/github-oidc-frontend-role
      SECRET_ID_PREFIX: /frontend/${{ matrix.env }}/env

    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üîê AWS Auth via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Load secrets from AWS Secrets Manager
        id: secrets
        run: |
          secret=$(aws secretsmanager get-secret-value --secret-id $SECRET_ID_PREFIX --query SecretString --output text)
          echo "$secret" > secrets.json
          echo "ECR_REPOSITORY=$(jq -r '.ECR_REPOSITORY' secrets.json)" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=$(jq -r '.S3_BUCKET_NAME' secrets.json)" >> $GITHUB_ENV
          echo "CLOUDFRONT_DISTRIBUTION_ID=$(jq -r '.CLOUDFRONT_DISTRIBUTION_ID' secrets.json)" >> $GITHUB_ENV

      - name: Build Angular App
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - run: npm ci
      - run: npm run build -- --configuration=production

      - name: ‚òÅDeploy to S3
        run: |
          aws s3 sync ./dist/ $S3_BUCKET_NAME \
            --delete \
            --cache-control max-age=31536000,public

      - name: Build & Push Docker Image to ECR
        run: |
          docker build -t $ECR_REPOSITORY:latest .
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY
          docker push $ECR_REPOSITORY:latest

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
            --paths "/*"
