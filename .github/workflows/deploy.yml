name: Deploy Frontend - Prod

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build-all:
    name: üöÄ Build MFE + Shell
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üß± Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: üìÇ Install Dependencies
        run: npm install

      - name: üîß Build mfe1
        run: npm run build:mfe1

      - name: üîß Build checkout
        run: npm run build:checkout

      - name: üîß Build shell
        run: npm run build:shell

  deploy-prod:
    name: üöÄ Deploy Produ√ß√£o
    needs: build-all
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      ROLE_ARN: arn:aws:iam::377147527660:role/GitHubOIDCRoleFrontend
      SECRET_ID: angular/app/dev

    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üîê Login via OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üìÖ Obter secrets do Secrets Manager
        id: secrets
        run: |
          secret=$(aws secretsmanager get-secret-value --secret-id $SECRET_ID --query SecretString --output text)
          echo "$secret" > secret.json
          echo "ECR_REPOSITORY=$(jq -r '.ECR_REPOSITORY' secret.json)" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=$(jq -r '.S3_BUCKET_NAME' secret.json)" >> $GITHUB_ENV
          echo "CLOUDFRONT_DISTRIBUTION_ID=$(jq -r '.CLOUDFRONT_DISTRIBUTION_ID' secret.json)" >> $GITHUB_ENV

      - name: üïµÔ∏è‚Äç‚ôÇÔ∏è List dist contents
        run: ls -R dist
  
      - name: ‚òÅÔ∏è Deploy mfe1 para S3
        run: aws s3 sync dist/mfe1/ "$S3_BUCKET_NAME/mfe1" --delete --cache-control max-age=31536000,public

      - name: ‚òÅÔ∏è Deploy checkout para S3
        run: aws s3 sync dist/checkout/ "$S3_BUCKET_NAME/checkout" --delete --cache-control max-age=31536000,public

      - name: ‚òÅÔ∏è Deploy shell para S3
        run: aws s3 sync dist/shell/ "$S3_BUCKET_NAME" --delete --cache-control max-age=31536000,public

      - name: üê≥ Push Docker Image para ECR
        run: |
          docker build -t $ECR_REPOSITORY:latest .
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY
          docker push $ECR_REPOSITORY:latest

      - name: üöÄ Invalida√ß√£o do CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
            --paths "/*"

      - name: üìä Notifica√ß√£o de Deploy
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "üåü Deploy em produ√ß√£o finalizado com sucesso para commit ${{ github.sha }}.",
              "channel": "#deploys",
              "username": "GitHub Actions",
              "icon_emoji": ":rocket:"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
